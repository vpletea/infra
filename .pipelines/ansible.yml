parameters:
  - name: env
    displayName: Select the server
    type: string
    default: dev
    values:
    - dev
    - main

trigger:
  paths:
    include:
    - common/roles/base
    - common/roles/docker    
    - main/*.yaml
    - main/*.yml
    - dev/*.yaml
    - dev/*.yml

pool:
  vmImage: ubuntu-latest

stages:
- stage: configure
  displayName: Configure ${{ parameters.env }}
  jobs:
  - job: Configure
    steps:
    - script: |
        curl -s https://install.zerotier.com | sudo bash
        ZEROTIER_ID="$(sudo zerotier-cli status | awk '{print$3}')"
        echo "##vso[task.setvariable variable=nodeid]$ZEROTIER_ID"
        sudo zerotier-cli join $(ZEROTIER_NETWORK)
      displayName: 'Zerotier Install'
    - script: |
          curl -X POST "https://my.zerotier.com/api/v1/network/$(ZEROTIER_NETWORK)/member/$(nodeid)" \
              -H "Content-Type: application/json" \
              -H "Authorization: bearer $(ZEROTIER_TOKEN)" -d '{ "config": {"authorized": true}, "name": "azure", "description": ""  }'
      displayName: 'Zerotier Authorization'
    - task: DownloadSecureFile@1
      name: sshkey
      displayName: 'Download ssh key'
      inputs:
        secureFile: 'homelab-key'
    - task: Bash@3
      displayName: 'Set ssh key permissions'
      inputs:
        targetType: 'inline'
        script: |
          chmod 400 $(sshkey.secureFilePath)
        workingDirectory: '$(Build.SourcesDirectory)'
    - task: Bash@3
      displayName: 'Running playbook on ${{ parameters.env }}'
      inputs:
        targetType: 'inline'
        script: |
          ansible-playbook -i "${{ parameters.env }}.$(domain) ," ${{ parameters.env }}.yaml \
            --extra-vars \
            "ansible_user=devops \
              ansible_ssh_extra_args='-o StrictHostKeyChecking=no' \
              ansible_ssh_private_key_file=$(sshkey.secureFilePath) \
              workload=$(Build.SourcesDirectory)/workload"
        workingDirectory: '$(Build.SourcesDirectory)/${{ parameters.env }}'
    - script: |
        curl -X DELETE "https://my.zerotier.com/api/v1/network/$(ZEROTIER_NETWORK)/member/$(nodeid)" \
        -H "Content-Type: application/json" \
        -H "Authorization: bearer $(ZEROTIER_TOKEN)"
      displayName: 'Zerotier Deauthorization'
      condition: always ()

- stage: Cleanup
  condition: always()
  displayName: Cleaning-up
  jobs:
    - job: Cleanup
      workspace:
        clean: all
      steps:
      - checkout: none
